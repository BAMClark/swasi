gi_inout_desc = if_else(
gi_inout == 1,
"Ingroup", "Outgroup"
),
so_desc = case_when(
so_check == 1 & so_asexual == 1 ~ "Asexual",
so_check == 1 & so_bisexual == 1 ~ "Bisexual",
so_check == 1 & so_fluid == 1 ~ "Fluid",
so_check == 1 & so_gay ==  1 ~ "Gay",
so_check == 1 & so_hetero == 1 ~ "Straight or Heterosexual",
so_check == 1 & so_lesbian == 1 ~ "Lesbian",
so_check == 1 & so_pansexual == 1 ~ "Pansexual",
so_check == 1 & so_queer == 1 ~ "Queer",
so_check == 1 & so_questioning == 1 ~ "Questioning or Unsure",
so_check == 1 & so_sgl == 1 ~ "Same-Gender Loving",
so_check > 1 & str_detect(so_cats, "Questioning") ~ "Questioning or Unsure",
so_check > 1 &
!str_detect(so_cats, "Questioning") &
!str_detect(so_cats, "NA") ~
"Mixture"
),
so_desc_bin = if_else(
so_desc == "Straight or Heterosexual",
"Straight or Heterosexual", "LGBQ+"
),
so_inout = if_else(
so_desc_bin == "Straight or Heterosexual",
1, 0
),
so_inout_desc = if_else(
so_inout == 1,
"Ingroup", "Outgroup"
),
lgbtqia = case_when(#almost certainly computed incorrectly
#in all previous iterations
gi_desc_bin_1 == "Nonbinary" |
so_desc_bin == "LGBQ+" ~
"LGBTQIA+",
!is.na(gi_desc_bin_1) |
!is.na(so_desc_bin) ~
"Not LGBTQIA+"
),
fy_desc = case_when(#almost certainly computed incorrectly
#in at least some previous iterations
fy == 0 ~ "Not Foster Youth",
fy == 1 ~ "Foster Youth",
fy == 99 ~ "Prefer not to Respond"
),
af_desc = case_when(#almost certainly computed incorrectly
#in at least some previous iterations
af == 0 ~ "Not Veteran/Active Duty",
af == 1 ~ "Veteran/Active Duty",
af == 99 ~ "Prefer not to Respond"
),
cd_desc = case_when(
cd == 1 ~ "Children",
cd == 2 ~ "Other Dependents",
cd == 3 ~ "Both",
cd == 4 ~ "Neither",
cd == 99 ~ "Prefer not to Respond"
),
cd_desc_bin = case_when(
cd < 4 ~ "Has Children/Dependents",
cd == 4 ~ "Does Not Have Children/Dependents",
cd == 99 ~ "Prefer not to respond"
),
d_desc = case_when(
d == 0 ~ "No",
d == 1 ~ "Yes",
d == 99 ~ "Prefer not to respond"
),
da_desc = case_when(
da == 0 ~ "No",
da == 1 ~ "Yes",
da == 2 ~ "I am not aware of such services",
da == 99 ~ "Prefer not to respond"
),
efl_desc = if_else(
efl == 1,
"English", "Not English"
),
fa_1_desc = if_else(
fa_1 == 1,
"Receive Aid", "Not Receive Aid"
),
fa_2a_desc = case_when(
fa_2a == 1 ~ "Receive Loans",
fa_2a == 0 ~ "Not Receive Loans",
fa_1 == 0 ~ "Not Receive Aid"
),
fa_2b_desc = case_when(
fa_2b == 1 ~ "Receive Pell",
fa_2b == 0 ~ "Not Receive Pell",
fa_1 == 0 ~ "Not Receive Aid"
),
fa_2c_desc = case_when(
fa_2c == 1 ~ "Receive Work-Study",
fa_2c == 0 ~ "Not Receive Work-Study",
fa_1 == 0 ~ "Not Receive Aid"
),
rc_pe_1 = if_else(
pe_1 < 7,
pe_1, NA_real_
),
rc_pe_2 = if_else(
pe_2 < 7,
pe_2, NA_real_
),
pe_1_desc = recode(
pe_1,
`1` = "Some High School, No Diploma",
`2` = "High School Diploma, GED",
`3` = "Some College Experience, No Degree",
`4` = "2-Year Technical/Associate's Degree",
`5` = "4-Year College/University Degree",
`6` = "Graduate Degree (Masters, Doctorate, Law)",
`7` = "Don't Know/Not Applicable"
),
pe_2_desc = recode(
pe_2,
`1` = "Some High School, No Diploma",
`2` = "High School Diploma, GED",
`3` = "Some College Experience, No Degree",
`4` = "2-Year Technical/Associate's Degree",
`5` = "4-Year College/University Degree",
`6` = "Graduate Degree (Masters, Doctorate, Law)",
`7` = "Don't Know/Not Applicable"
),
fg_surv = case_when(
pe_1 == 5 | pe_1 == 6 | pe_2 == 5 | pe_2 == 6 ~ "Continuing-Generation",
pe_1 < 5 & pe_2 < 5 ~ "First-Generation",
pe_2 == 7 & pe_1 < 5 ~ "First-Generation",
pe_1 == 7 & pe_2 < 5 ~ "First-Generation",
pe_1 < 5 & is.na(pe_2) ~ "First-Generation",
pe_2 < 5 & is.na(pe_1) ~ "First-Generation"
),
fg_combo = if_else(is.na(first_gen) | first_gen == "Unknown", fg_surv, first_gen
), #firstgen is from records; pe/fg_surv is from survey
sss_desc_bin = case_when(
sss < 5 ~ "Lower",
sss > 4 & sss < 8 ~ "Middle",
sss > 7 ~ "Upper"
),
fsc_desc = recode(
fsc,
`1` = "Working Class",
`2` = "Lower-Middle Class",
`3` = "Middle Class",
`4` = "Upper-Middle Class",
`5` = "Upper Class"
),
fsc_desc_bin = case_when(
fsc < 3 ~ "Lower",
fsc == 3 ~ "Middle",
fsc > 3 ~ "Upper"
),
hsa_1_desc = recode(
hsa_1,
`1` = "Less Advantaged",
`2` = "Equally Advantaged",
`3` = "More Advantaged"
)
) %>%
select(
id_bl:gi_other_text, gi_agender:gi_pntr,
gi_agender_desc:gi_pntr_desc, gi_cats,
gi_desc:gi_inout_desc, gii, so, so_other_text,
so_asexual, so_bisexual, so_fluid, so_gay:so_pntr,
so_asexual_desc:so_pntr_desc, so_cats,
so_desc:so_inout_desc, soi, lgbtqia,
rei:fy, fy_desc, af, af_desc, cd, cd_desc, cd_desc_bin,
cd_a1, cd_a2, d, d_desc, da, da_desc, efl, efl_desc, fl,
fa_1:fa_2c, fa_1_desc:fa_2c_desc, pe_1, pe_2,
rc_pe_1:fg_surv, fg_combo, sss, sss_desc_bin, fsc,
fsc_desc, fsc_desc_bin, hsa_1, hsa_1_desc, hsa_2
)
write_csv(
df,
paste0(
path,
name,
year,
".csv"
)
)
}
bar_fun <- function(df, cat_vars, year, path = "output/EDA/plots/barplots/", na.rm = T, ...) {
cat_vars <- df %>%
select(
all_of(
cat_vars
)
)
nm <- names(cat_vars)
for(i in seq_along(nm)) {
bars <- ggplot(df, aes_string(nm[i])) +
stat_count(width = 1) +
coord_flip()
ggsave(
bars,
filename = paste0(
path,
nm[i],
"_bl_",
year,
".png"
)
)
}
}
hist_fun <- function(df, quant_vars, year, path = "output/EDA/plots/histograms/", na.rm = T, ...) {
df <- df %>%
mutate(across(all_of(quant_vars), ~as.numeric(.x)))
quant_vars <- df %>%
select(
all_of(
quant_vars
)
)
nm <- names(quant_vars)
for(i in seq_along(nm)) {
histos <- ggplot(df, aes_string(nm[i])) +
geom_histogram(binwidth = 1)
ggsave(
histos,
filename = paste0(
path,
nm[i],
"_bl_",
year,
".png"
)
)
}
}
library(readr)
blorig <- read_csv("~/Desktop/r_projects/oar/package/data/blorig.csv")
View(blorig)
install.packages("devtools")
install.packages("roxygen2")
library(roxygen2)
library(devtools)
devtools::load_all()
check()
devtools::load_all()
check()
document()
document()
install()
library("devtools")
library(roxygen2)
devtools::load_all()
devtools::load_all()
devtools::load_all()
check()
document()
install()
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(tidyverse)
library(here)
dat <- read.csv(here("oar/package/data/blorig.csv"))
create_codebook <- function(df, year, path = ""){
key_code = data.frame(unlist(colnames(df)), unlist(df[1, ], use.names = FALSE))
names(key_code) = c("name", "description")
key_code
write_csv(
key_code,
paste0(
path,
"codebook_",
year,
".csv"
)
)
}
codebook <- create_codebook(dat, 2223)
clean_data <- function(df, beg_row = 1, end_row = 2, lower_bound = 3, upper_bound = 95) {
df_clean <- df %>%
janitor::clean_names() %>%
filter(!row_number() %in% c(beg_row:end_row)) %>%
distinct(external_reference, .keep_all = TRUE) %>%
mutate(external_reference = as.numeric(external_reference))
df_clean$progress <- as.numeric(df_clean$progress)
df_clean %>%
mutate(
completion_status = factor(
case_when(
progress == lower_bound ~ "consent only",
progress > lower_bound & progress < upper_bound ~ "partial",
progress >= upper_bound ~ "complete"
),
levels = c(
"complete",
"partial",
"consent only"
)
)
)
}
bl <- clean_data(dat)
llave_pre <- read.csv(here("oar/package/data/SWaSI_llave.csv")) #to see the format of the reference file for binding
# for testing use below
# df1<- llave_pre
# df2 <- blorig
# year <- 2223
# baseline
update_reference <- function(df1, df2, year, path = ""){
original_llave <- df1 %>%
clean_names() %>%
rename(uo_id = uoid,
id_eoy = id_eoy22)
names(original_llave)[names(original_llave) == "id_eoy"] <- paste0("id_eoy_", year)
lastmax<- max(
original_llave$id_bl[
original_llave$id_bl<86000001 & !is.na(original_llave$id_bl)
]
)
#create id_bl var in original data
df_updated <- df2 %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
uo_id = as.numeric(external_reference),
pidm = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
id <- df_updated %>%
select(uo_id, pidm)
update <- bind_rows(original_llave, id) #86 numbers need to be in the updated key
write_csv(
original_llave,
paste0(
path,
"reference_key_",
year,
".csv" ))
write_csv(
update,
paste0(
path,
"reference_key_update.csv"
))
df_updated
}
bl <- update_reference(llave_pre, bl, year = 2223)
# df <- bl
deidentify <- function(df, path = "", year) { #key then dataset, return dataset
raw <- df %>%
select(
-ip_address,
-recipient_last_name, -recipient_first_name,
-recipient_email, -uo_id,
-location_latitude, -location_longitude, -pidm
)
write_csv(
raw,
paste0(
path,
"did_bl_",
year,
".csv"
))
}
bl_anon <- deidentify(bl, year = 2223)
separate_consent <- function(df, year, path = "", consent_status = "") {
consent_prep <- df %>%
mutate(mc_1_providecontact = ifelse(mc_1 == 1 & !is.na(mc_1_1_text),
"Y", "N")) %>%
mutate(c_dat = ifelse(c_dat == 1, "Yes", "No"),
mc_1 = ifelse(mc_1 == 1, "Yes", "No"),
mc_2 = ifelse(mc_2 == 1, "Yes", "No"))
consented <- consent_prep %>%
filter(c_dat == "Yes")
not_consented <- consent_prep %>%
filter(c_dat != "Yes")
write_csv(
consented,
paste0(
path,
"consented_bl_",
year,
".csv"
))
write_csv(
not_consented,
paste0(
path,
"noconsent_bl_",
year,
".csv"
))
if(consent_status == "yes" | consent_status == "Yes") {
consented
} else if(consent_status == "no" | consent_status == "No") {
not_consented
} else {
consent_prep
}
}
yuppers <- separate_consent(bl_anon, year = 2223, consent_status = "yes")
nopeee <- separate_consent(bl_anon, year = 2223, consent_status = "no")
alllll <- separate_consent(bl_anon, year = 2223)
library(devtools)
library(roxygen2)
devtools::load_all()
check()
document()
install()
update_reference <- function(df1, df2, year, period, path = ""){
original_llave <- df1 %>%
clean_names() %>%
rename(UOID = uoid,
id_eoy = id_eoy22,
PIDM = pidm)
names(original_llave)[names(original_llave) == "id_eoy"] <- paste0("id_eoy_", year)
lastmax<- max(
original_llave$id_bl[
original_llave$id_bl<86000001 & !is.na(original_llave$id_bl)
]
)
#create id_bl var in original data
df_updated <- df2 %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
uo_id = as.numeric(external_reference),
pidm = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
id <- df_updated %>%
select(uo_id, pidm)
update <- bind_rows(original_llave, id) #86 numbers kept in the updated key
write_csv(
original_llave,
paste0(
path,
"SWaSI_llave_pre",
period,
".csv" ))
write_csv(
update,
paste0(
path,
"SWaSI_llave.csv"
))
df_updated
}
bl <- update_reference(llave_pre, bl, year = 2223)
bl <- update_reference(llave_pre, bl, period = 22, year = 2223)
bl
View(bl)
df1 <- llave_pre
df2 <- bl
original_llave <- df1 %>%
clean_names() %>%
rename(UOID = uoid,
id_eoy = id_eoy22,
PIDM = pidm)
View(original_llave)
original_llave <- df1 %>%
clean_names() %>%
rename(UOID = uoid,
PIDM = pidm)
lastmax<- max(
original_llave$id_bl[
original_llave$id_bl<86000001 & !is.na(original_llave$id_bl)
]
)
df_updated <- df2 %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
UOID = as.numeric(external_reference),
PIDM = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
df_updated <- df2 %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
UOID = as.numeric(external_reference),
PIDM = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
df2$year
year <- 2223
df_updated <- df2 %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
UOID = as.numeric(external_reference),
PIDM = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
View(df_updated)
#create id_bl var in original data
df_updated <- df2 %>%
rename(UOID = uo_id) %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
UOID = as.numeric(external_reference),
PIDM = as.numeric(pidm)) %>%
filter(id_bl < 86000001)
df_updated <- df2 %>%
rename(UOID = uo_id) %>%
mutate(cohort = year,
id_bl = as.numeric(rownames(df2)) + lastmax,
UOID = as.numeric(external_reference),
PIDM = as.numeric(pidm)) %>%
filter(id_bl < 86000001) %>%
select(-pidm)
id <- df_updated %>%
select(UOID, PIDM, id_bl, cohort)
View(id)
update <- bind_rows(original_llave, id)
View(update)
library(devtools)
library(roxygen2)
devtools::load_all()
check()
install()
